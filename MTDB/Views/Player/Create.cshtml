@using MTDB.Helpers
@model MTDB.Core.ViewModels.CreatePlayerDto

@{
    ViewBag.Title = "Create";
}


@using (Html.BeginForm("Create", "Player", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="bg-light lter b-b wrapper-md">
        <div class="row">
            <div class="col-sm-6 col-xs-12">
                <h1 class="m-n font-thin h3 text-black">Add Player</h1>
            </div>
        </div>
    </div>

    <div class="wrapper-md">
        <!-- stats -->
        <div class="panel panel-default">
            <div class="panel-heading font-bold">
                Player Form
            </div>
            <div class="panel-body">
                <div class="line line-dashed b-b line-lg pull-in"></div>

                <div class="form-group">
                    <label class="control-label">Upload Player Image</label>
                    @Html.UploadFileFor(p => p.Image)
                    @Html.ThemedValidationMessageFor(m => m.Image)
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>

                <div class="form-group">
                    <label>2K Id</label>
                    @Html.TextBoxFor(p => p.NBA2K_Id, "form-control", "Enter NBA 2K ID")
                    @Html.ThemedValidationMessageFor(m => m.NBA2K_Id)
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>

                <div class="form-group">
                    <label>Player Name</label>
                    @Html.TextBoxFor(p => p.Name, "form-control", "Enter Player Name")
                    @Html.ThemedValidationMessageFor(m => m.Name)
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>

                <div class="form-group">
                    <label>Overall</label>
                    @Html.UpDownFor(p => p.Overall)
                    @Html.ThemedValidationMessageFor(m => m.Overall)
                </div>

                @Html.EditorFor(m => m.Attributes)

                <div class="line line-dashed b-b line-lg pull-in"></div>
                
                <div class="form-group">
                    <label>Age</label>
                    @Html.UpDownFor(p => p.Age)
                    @Html.ThemedValidationMessageFor(m => m.Age)
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>

                <div class="form-group">
                    <label>Height</label>
                    @Html.ChosenDropBoxFor(p => p.Height, SelectLists.HeightSelectList, placeHolder: "Height")
                    @Html.ThemedValidationMessageFor(m => m.Height)
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>

                <div class="form-group">
                    <label>Weight</label>
                    @Html.UpDownFor(p => p.Weight, "form-control", 0, 400)
                    @Html.ThemedValidationMessageFor(m => m.Weight)
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>

                <div class="form-group">
                    <label>Primary Position</label>
                    @Html.ChosenDropBoxFor(p => p.PrimaryPosition, SelectLists.PositionsSelectList, placeHolder: "Primary Position")
                    @Html.ThemedValidationMessageFor(m => m.PrimaryPosition)
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>

                <div class="form-group">
                    <label>Secondary Position</label>
                    @Html.ChosenDropBoxFor(p => p.SecondaryPosition, SelectLists.PositionsSelectList, placeHolder: "Secondary Position")
                </div>

                <div class="line line-dashed b-b line-lg pull-in">
                </div>

                <div class="form-group">
                    <label>Xbox</label>
                    @Html.UpDownFor(p => p.Xbox, "form-control", 0, 999999999)
                    @Html.ThemedValidationMessageFor(m => m.Xbox)
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>

                <div class="form-group">
                    <label>PS4</label>
                    @Html.UpDownFor(p => p.PS4, "form-control", 0, 999999999)
                    @Html.ThemedValidationMessageFor(m => m.PS4)
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>

                <div class="form-group">
                    <label>PC</label>
                    @Html.UpDownFor(p => p.PC, "form-control", 0, 999999999)
                    @Html.ThemedValidationMessageFor(m => m.PC)
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>
                <div class="form-group">
                    <label>Theme</label>
                    <div class="input-group">
                        @Html.ChosenDropBoxFor(p => p.Theme, new SelectList(Model.Themes, "Id", "Name"))
                        <span class="input-group-btn">
                            <a href="@Url.Action("Manage")" class="btn btn-default">Manage</a>
                        </span>
                    </div>
                    @Html.ThemedValidationMessageFor(m => m.Theme)
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>
                <div class="form-group">
                    <label>Team</label>
                    <div class="input-group">
                        @Html.ChosenDropBoxFor(p => p.Team, new SelectList(Model.Teams, "Id", "Name"))
                        <span class="input-group-btn">
                            <a href="@Url.Action("Manage")" class="btn btn-default">Manage</a>
                        </span>
                    </div>
                    @Html.ThemedValidationMessageFor(m => m.Team)
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>
                <div class="form-group">
                    <label>Tier</label>
                    <div class="input-group">
                        @Html.ChosenDropBoxFor(p => p.Tier, new SelectList(Model.Tiers, "Id", "Name"))
                        <span class="input-group-btn">
                            <a href="@Url.Action("Manage")" class="btn btn-default">Manage</a>
                        </span>
                    </div>
                    @Html.ThemedValidationMessageFor(m => m.Tier)
                </div>
                <div class="line line-dashed b-b line-lg pull-in"></div>
                <div class="form-group">
                    <label>Collection</label>
                    <div class="input-group">
                        @Html.ChosenDropBoxFor(p => p.Collection, new SelectList(Model.Collections, "Id", "Name"))
                        <span class="input-group-btn">
                            <a href="@Url.Action("Manage")" class="btn btn-default">Manage</a>
                        </span>
                    </div>
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>
                <div class="form-group">
                    <div class="checkbox">
                        <label>@Html.CheckBoxFor(p => p.Private) Private</label>
                    </div>
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>
                <div class="form-group">
                    <label>Publish Date</label>
                    @Html.TextBoxFor(p => p.PublishDate, "{0:MM/dd/yyyy}", new { data_provide = "datepicker" })
                </div>

                <div class="line line-dashed b-b line-lg pull-in"></div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Submit Player</button>
                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-default" })
                </div>

            </div>
        </div>
    </div>

}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/datepicker")


}
