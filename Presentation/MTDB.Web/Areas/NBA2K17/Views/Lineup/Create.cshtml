@using MTDB.Core.ViewModels.Lineups
@model CreateLineupDto

@{
    ViewBag.Title = "Create";
}

@helper LineupTemplate(MvcHtmlString hidden, MvcHtmlString text, bool guest = true)
{
    <li class="lineup-player@(!guest ? " chosen" : string.Empty)">
        <div class="details whitebg" draggable="true">
            <div class="remove">
                <i class="fa fa-remove fa-lg"></i>
            </div>
            <div class="picture">
                <img src="/Content/Images/card-guest.png" class="img-responsive center-block">
            </div>
            <div class="lineup-player-details">
                <span class="player-position">- @text -</span>
                <ul class="list-unstyled list-inline lineup-stats">
                    <li><span class="statNum playerOv">0</span><small><strong>OVR</strong></small></li>
                    <li><span class="statNum playerOut">0</span><small><strong>OUT</strong></small></li>
                    <li><span class="statNum playerIn">0</span><small><strong>INS</strong></small></li>
                    <li><span class="statNum playerPl">0</span><small><strong>PLA</strong></small></li>
                    <li><span class="statNum playerAt">0</span><small><strong>ATH</strong></small></li>
                    <li><span class="statNum playerDe">0</span><small><strong>DEF</strong></small></li>
                    <li><span class="statNum playerRe">0</span><small><strong>REB</strong></small></li>
                </ul>
            </div>
        </div>
        <div class="guest whitebg">
            <div class="picture">
                <img src="/Content/Images/card-guest.png" class="img-responsive center-block">
            </div>
            <div class="lineup-player-details">
                <span class="player-position">- @text -</span>
                <div class="lineup-players">
                    @hidden
                    <input type="text" class="form-control m-b" placeholder="Enter Player Name">
                </div>
            </div>
        </div>
        
    </li>
}

@using (Html.BeginForm("Create", "Lineup", FormMethod.Post, new {@id = "submitForm"}))
{
    @Html.AntiForgeryToken()
    <!-- / hero -->
    <div class="wrapper-lg">
        <div class="row">
            <br>
            <div class="col-md-12">
                <ul class="list-unstyled lineup-starters text-center">
                    @LineupTemplate(@Html.HiddenFor(model => model.PointGuardId), @Html.DisplayNameFor(model => model.PointGuardId))
                    @LineupTemplate(@Html.HiddenFor(model => model.ShootingGuardId), @Html.DisplayNameFor(model => model.ShootingGuardId))
                    @LineupTemplate(@Html.HiddenFor(model => model.SmallForwardId), @Html.DisplayNameFor(model => model.SmallForwardId))
                    @LineupTemplate(@Html.HiddenFor(model => model.PowerForwardId), @Html.DisplayNameFor(model => model.PowerForwardId))
                    @LineupTemplate(@Html.HiddenFor(model => model.CenterId), @Html.DisplayNameFor(model => model.CenterId))
                </ul>
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-md-12">
                <ul class="list-unstyled lineup-benched text-center">
                    @LineupTemplate(@Html.HiddenFor(model => model.Bench1Id), @Html.DisplayNameFor(model => model.Bench1Id))
                    @LineupTemplate(@Html.HiddenFor(model => model.Bench2Id), @Html.DisplayNameFor(model => model.Bench2Id))
                    @LineupTemplate(@Html.HiddenFor(model => model.Bench3Id), @Html.DisplayNameFor(model => model.Bench3Id))
                    @LineupTemplate(@Html.HiddenFor(model => model.Bench4Id), @Html.DisplayNameFor(model => model.Bench4Id))
                    @LineupTemplate(@Html.HiddenFor(model => model.Bench5Id), @Html.DisplayNameFor(model => model.Bench5Id))
                    @LineupTemplate(@Html.HiddenFor(model => model.Bench6Id), @Html.DisplayNameFor(model => model.Bench6Id))
                    @LineupTemplate(@Html.HiddenFor(model => model.Bench7Id), @Html.DisplayNameFor(model => model.Bench7Id))
                    @LineupTemplate(@Html.HiddenFor(model => model.Bench8Id), @Html.DisplayNameFor(model => model.Bench8Id))
                </ul>
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-md-12">
                <div class="form-inline">
                    <div class="form-group">
                        @*<label>Team</label>*@
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.Name, new {@class = "form-control", placeholder = "Name"})
                            <span class="input-group-btn">
                                <button id="submitButton" class="btn btn-primary">Create Lineup</button>
                            </span>
                        </div>
                        <span class="help-block">@Html.ValidationMessageFor(model => model.Name, "Name is required.", new { style = "display: none;"})</span>
                        @*@Html.ThemedValidationMessageFor(m => m.Name,)*@
                    </div>
                </div>

                @*<button type="reset" class="btn btn-default">Cancel</button>*@
            </div>
        </div>
    </div>
}
<!-- / Lineup -->

@section scripts {
    <script type="text/javascript">
        $(function() {
            $('.lineup-player .remove').click(function() {
                var container = $(this).parents('.lineup-player');
                container.find('input[type=hidden]').val('');
                container.removeClass('chosen');
            });

            $.each($('.lineup-player'), function (index, wrapper) {
                var container = $(wrapper);

                $(wrapper).find('.guest .lineup-player-details .lineup-players input[type=text]').autocomplete({
                    source: '@Url.Action("Autocomplete", "Player")',
                    messages: {
                        noResults: '',
                        results: function () { }
                    },
                    minLength: 3,
                    select: function (event, ui) {
                        container.find('input[type=hidden]').val(ui.item.Id);
                        container.find('input[type=text]').val('');
                        $.get('@Url.Action("Details", "Player", new { id = 0 })'.replace("/0", "/") + ui.item.Id, function (data) {
                            container.addClass('chosen');

                            container.find('.details .picture img').attr("src", data.ImageUri);
                            container.find('.playerOv').html(data.Overall);
                            container.find('.playerOut').html(getAverageByName(data.GroupAverages, 'Outside Scoring'));
                            container.find('.playerIn').html(getAverageByName(data.GroupAverages, 'Inside Scoring'));
                            container.find('.playerPl').html(getAverageByName(data.GroupAverages, 'Playmaking'));
                            container.find('.playerAt').html(getAverageByName(data.GroupAverages, 'Athleticism'));
                            container.find('.playerDe').html(getAverageByName(data.GroupAverages, 'Defending'));
                            container.find('.playerRe').html(getAverageByName(data.GroupAverages, 'Rebounding'));

                            var cell = $('.lineup-player-details .statNum');
                            SetColor(cell);
                        });
                        return false;
                    }
                }).autocomplete("instance")._renderItem = function (ul, item) {
                    var container = $("<div>", {
                        'data-href': '@Url.Action("Details", "Player", new { playerUri = "__" })'.replace("__", "") + item.UriName,
                        'class': 'autocomplete-container ' + item.Tier.toLowerCase()
                    });
                    var info = $("<div>",
                    {
                        'class': 'info'
                    });
                    info.append($("<img>",
                    {
                        src: item.ImageUri
                    }));
                    var inforContainer = $('<div>', {
                        'class': 'info-container'
                    });
                    inforContainer.append($('<span>', {
                        'class': 'name'
                    }).html(item.Name));

                    inforContainer.append($('<span>', {
                        'class': 'collestion'
                    }).html(item.Collection));
                    info.append(inforContainer);
                    container.append(info);

                    container.append($('<div>', {
                        'class': 'overhaul'
                    }).html(item.Position + ' ' + item.Overall));

                    var li = $("<li>").append(container);
                    return li.appendTo(ul);
                };

            });
        });

        function SetColor(cell) {
            cell.each(function () {
                var cell_value = $(this).html();
                if ((cell_value >= 0) && (cell_value <= 59)) {
                    $(this).css({ 'background': '#A52A2A' });
                } else if ((cell_value >= 60) && (cell_value <= 69)) {
                    $(this).css({ 'background': '#D2691E' });
                } else if ((cell_value >= 70) && (cell_value <= 79)) {
                    $(this).css({ 'background': '#DAA520' });
                } else if ((cell_value >= 80) && (cell_value <= 89)) {
                    $(this).css({ 'background': '#008000' });
                } else if (cell_value >= 90) {
                    $(this).css({ 'background': '#32CD32' });
                }
            });
        }

        [].forEach.call(document.querySelectorAll('.lineup-player .details'), function(container) {
            container.addEventListener('dragstart', handleDragStart, false);
            container.addEventListener('dragover', handleDragOver, false);
            container.addEventListener('drop', handleDrop, false);
            container.addEventListener('dragend', handleDragEnd, false);
        });
        [].forEach.call(document.querySelectorAll('.lineup-player .guest'), function(container) {
            container.addEventListener('dragover', handleDragOver, false);
            container.addEventListener('drop', handleDrop, false);
        });
        [].forEach.call(document.querySelectorAll('.lineup-player .guest img'), function (img) {
            img.addEventListener('dragstart', function (e) { e.preventDefault(); }, false);
        });

        var dragSrcEl = null;

        function handleDragStart(e) {
            this.classList.add('moving');
            dragSrcEl = this;
            e.dataTransfer.setData('text/plain', 'player'); //firefox require set dataTransfer
        }

        function handleDragOver(e) {
            e.preventDefault();
            return false;
        }

        function handleDragEnd(e) {
            this.classList.remove('moving');
        }

        function handleDrop(e) {
            e.preventDefault();
            if (e.dataTransfer.getData('text/plain') != 'player')
                return false;


            if (dragSrcEl != this) {
                var init = $(dragSrcEl);
                var target = $(this);
                var initSelect = init.parent().find('input[type=hidden]');
                var targetSelect = target.parent().find('input[type=hidden]');

                var tempValue = initSelect.val();
                initSelect.val(targetSelect.val());
                targetSelect.val(tempValue);

                if (target.hasClass('details')) {
                    var data = target.clone();
                    target.find('.picture img').attr('src', init.find('.picture img').attr('src'));
                    target.find('.lineup-stats').html(init.find('.lineup-stats').html());

                    init.find('.picture img').attr('src', data.find('.picture img').attr('src'));
                    init.find('.lineup-stats').html(data.find('.lineup-stats').html());
                } else {
                    target.parent().addClass('chosen');
                    target = target.parent().find('.details');

                    target.find('.picture img').attr('src', init.find('.picture img').attr('src'));
                    target.find('.lineup-stats').html(init.find('.lineup-stats').html());

                    init.parent().removeClass('chosen');
                }
            }

            return false;
        }

        function getAverageByName(data, name) {
            var toReturn = '';
            $.each(data, function(i, value) {
                if (value.Name == name) {
                    toReturn = value.Average;
                    return false;
                }
            });
            return toReturn;
        }

        $('#submitButton').click(function() {
            if ($("#@Html.IdFor(model => model.Name)").val().length == 0) {
                $('[data-valmsg-for=@Html.IdFor(model => model.Name)').show();
            } else {
                $('#submitForm').submit();
                $('#submitButton').prop('disabled', true);
            }
            return false;
        })
    </script>
}

